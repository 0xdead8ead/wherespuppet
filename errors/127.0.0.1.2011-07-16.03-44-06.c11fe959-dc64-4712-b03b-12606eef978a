(dp1
S'output'
p2
S''
sS'layer'
p3
S'/Users/schultzc/Downloads/web2py/applications/wp/controllers/default.py'
p4
sS'code'
p5
S'# -*- coding: utf-8 -*-\n# this file is released under public domain and you can use without limitations\n\n#########################################################################\n## This is a samples controller\n## - index is the default action of any application\n## - user is required for authentication and authorization\n## - download is for downloading files uploaded in the db (does streaming)\n## - call exposes all registered services (none by default)\n#########################################################################\nimport datetime\n\n\ndef index():\n    images = db().select(db.image.ALL, orderby=db.image.title)\n    return dict(images=images)\n    \ndef submit():\n    form = SQLFORM(db.image, formstyle="divs")\n    if form.accepts(request.vars, session):\n        response.flash = \'form accepted\'\n    elif form.errors:\n        response.flash = \'form has errors\'\n    else:\n        response.flash = \'please fill out the form\'\n    return dict(form=form)\n   \ndef show():\n    image = db(db.image.id==request.args(0)).select().first()\n    form = SQLFORM(db.comment)\n    form.vars.image_id = image.id\n    if form.accepts(request.vars, session):\n        response.flash = \'your comment is posted\'\n    comments = db(db.comment.image_id==image.id).select()\n    return dict(image=image, comments=comments, form=form)\n\ndef user():\n    """\n    exposes:\n    http://..../[app]/default/user/login\n    http://..../[app]/default/user/logout\n    http://..../[app]/default/user/register\n    http://..../[app]/default/user/profile\n    http://..../[app]/default/user/retrieve_password\n    http://..../[app]/default/user/change_password\n    use @auth.requires_login()\n        @auth.requires_membership(\'group name\')\n        @auth.requires_permission(\'read\',\'table name\',record_id)\n    to decorate functions that need access control\n    """\n    return dict(form=auth())\n\n\ndef download():\n    """\n    allows downloading of uploaded files\n    http://..../[app]/default/download/[filename]\n    """\n    return response.download(request,db)\n\n\ndef call():\n    """\n    exposes services. for example:\n    http://..../[app]/default/call/jsonrpc\n    decorate with @services.jsonrpc the functions to expose\n    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv\n    """\n    return service()\n\n\'\'\'\n@auth.requires_signature()\ndef data():\n    """\n    http://..../[app]/default/data/tables\n    http://..../[app]/default/data/create/[table]\n    http://..../[app]/default/data/read/[table]/[id]\n    http://..../[app]/default/data/update/[table]/[id]\n    http://..../[app]/default/data/delete/[table]/[id[\n    http://..../[app]/default/data/select/[table]\n    http://..../[app]/default/data/search/[table]\n    but URLs bust be signed, i.e. linked with\n      A(\'table\',_href=URL(\'data/tables\',user_signature=True))\n    or with the signed load operator\n      LOAD(\'default\',\'data.load\',args=\'tables\',ajax=True,user_signature=True)\n    """\n    return dict(form=crud())\n\'\'\'\n\nresponse._vars=response._caller(index)\n'
p6
sS'snapshot'
p7
(dp8
sS'traceback'
p9
S'Traceback (most recent call last):\n  File "/Users/schultzc/Downloads/web2py/gluon/restricted.py", line 192, in restricted\n    exec ccode in environment\n  File "/Users/schultzc/Downloads/web2py/applications/wp/controllers/default.py", line 90, in <module>\n  File "/Users/schultzc/Downloads/web2py/gluon/globals.py", line 137, in <lambda>\n    self._caller = lambda f: f()\n  File "/Users/schultzc/Downloads/web2py/applications/wp/controllers/default.py", line 15, in index\n    images = db().select(db.image.ALL, orderby=db.image.title)\n  File "/Users/schultzc/Downloads/web2py/gluon/dal.py", line 5394, in select\n    return self.db._adapter.select(self.query,fields,attributes)\n  File "/Users/schultzc/Downloads/web2py/gluon/dal.py", line 1176, in select\n    rows = response(sql)\n  File "/Users/schultzc/Downloads/web2py/gluon/dal.py", line 1166, in response\n    self.execute(sql)\n  File "/Users/schultzc/Downloads/web2py/gluon/dal.py", line 1251, in execute\n    return self.log_execute(*a, **b)\n  File "/Users/schultzc/Downloads/web2py/gluon/dal.py", line 1246, in log_execute\n    ret = self.cursor.execute(*a,**b)\nOperationalError: no such table: image\n'
p10
s.